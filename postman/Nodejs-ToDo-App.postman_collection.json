{
	"info": {
		"_postman_id": "08763ae7-e52c-4839-b0c3-a3d7e0f752e1",
		"name": "Nodejs-ToDo-App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /api/v1/boards",
			"item": [
				{
					"name": "User can fetch all boards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Endpoints returns array of objects with proper values', function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.boards).to.be.a('array')",
									"    pm.expect(responseData.boards[0].name).to.be.a('string')",
									"    pm.expect(responseData.boards[0].description).to.be.a('string')",
									"    pm.expect(responseData.boards[0].tasks).to.be.a('array')",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"boards\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"name\": { \"type\": \"string\" },",
									"                \"description\": { \"type\": \"string\" }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(\"It validated Json schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET /api/v1/boards/:id",
			"item": [
				{
					"name": "User can successfully fetch specific board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Endpoints returns array of objects with proper values', function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.name).to.be.a('string')",
									"    pm.expect(responseData.description).to.be.a('string')",
									"    pm.expect(responseData.tasks).to.be.a('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/6135c67b39777d4c25258935",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"6135c67b39777d4c25258935"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns an error when no ID is provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Return error message that the board with the given ID cannot be found', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.msg).to.eq(\"Cannot find board with id: 6135c67b39777d4c2525893a\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/6135c67b39777d4c2525893a",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"6135c67b39777d4c2525893a"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET /api/v1/boards/:id/tasks",
			"item": [
				{
					"name": "Returns tasks of specific board",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/123/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"123",
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST - /api/v1/boards",
			"item": [
				{
					"name": "User can successfully create a board",
					"item": [
						{
							"name": "User can successfully create a board",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const date = new Date();",
											"const boardTimestamp = date.getTime();",
											"",
											"pm.environment.set(\"boardName\", `Newly created board name ${boardTimestamp}`);",
											"pm.environment.set(\"boardDescription\", `Newly created board description ${boardTimestamp}`);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"New board values are returned\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.board.name).to.eql(pm.environment.get(\"boardName\"));",
											"    pm.expect(responseData.board.description).to.eql(pm.environment.get(\"boardDescription\"));",
											"    pm.environment.set(\"boardID\", responseData.board._id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{boardName}}\",\n    \"description\": \"{{boardDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/boards",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if board is successfully created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"New board values are returned\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.name).to.eql(pm.environment.get(\"boardName\"));",
											"    pm.expect(responseData.description).to.eql(pm.environment.get(\"boardDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/boards/{{boardID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards",
										"{{boardID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleans after test",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/boards/{{boardID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards",
										"{{boardID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User cannot create a board with name longer than 50 characters",
					"item": [
						{
							"name": "User cannot create a board with name longer than 50 characters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const date = new Date();",
											"const boardTimestamp = date.getTime();",
											"",
											"pm.environment.set(\"boardName\", `Newly created board name that is getting longer and longer and longer ${boardTimestamp}`);",
											"pm.environment.set(\"boardDescription\", `Newly created board description ${boardTimestamp}`);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"New board values are returned\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.err).to.eql(\"Boards validation failed: name: Board name cannot be longer than 50 characters\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{boardName}}\",\n    \"description\": \"{{boardDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/boards",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User cannot create a board with description longer than 100 characters",
					"item": [
						{
							"name": "User cannot create a board with name longer than 50 characters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const date = new Date();",
											"const boardTimestamp = date.getTime();",
											"",
											"pm.environment.set(\"boardName\", `Newly created board name ${boardTimestamp}`);",
											"pm.environment.set(\"boardDescription\", `Newly created board description that longer and longer and longer and longer and longer and longer ${boardTimestamp}`);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"New board values are returned\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.err).to.eql(\"Boards validation failed: description: Board description cannot be longer than 150 characters\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{boardName}}\",\n    \"description\": \"{{boardDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/boards",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User can successfully create a board without description",
					"item": [
						{
							"name": "User can successfully create a board without description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const date = new Date();",
											"const boardTimestamp = date.getTime();",
											"",
											"pm.environment.set(\"boardName\", `Newly created board name ${boardTimestamp}`);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"New board values are returned\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.board.name).to.eql(pm.environment.get(\"boardName\"));",
											"    pm.expect(responseData.board.description).to.eql(\"\");",
											"    pm.environment.set(\"boardID\", responseData.board._id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{boardName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/boards",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if board is successfully created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"New board values are returned\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.name).to.eql(pm.environment.get(\"boardName\"));",
											"    pm.expect(responseData.description).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/boards/{{boardID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards",
										"{{boardID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleans after test",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/boards/{{boardID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"boards",
										"{{boardID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "PUT - /api/v1/boards/:id",
			"item": [
				{
					"name": "Creates a board to edit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Saves boardID to update\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.environment.set(\"boardID\", responseData.board._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Name of the board\",\n    \"description\": \"Description of the board\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can successfully edit a board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"const boardTimestamp = date.getTime();",
									"",
									"pm.environment.set(\"boardName\", `Newly updated name ${boardTimestamp}`);",
									"pm.environment.set(\"boardDescription\", `Newly updated description ${boardTimestamp}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.board.name).to.eql(pm.environment.get(\"boardName\"));",
									"    pm.expect(responseData.board.description).to.eql(pm.environment.get(\"boardDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{boardName}}\",\n    \"description\": \"{{boardDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if board is successfully edited",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.eql(pm.environment.get(\"boardName\"));",
									"    pm.expect(responseData.description).to.eql(pm.environment.get(\"boardDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User cannot edit a board's name with empty value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"const boardTimestamp = date.getTime();",
									"",
									"pm.environment.set(\"boardName\", `Newly updated name ${boardTimestamp}`);",
									"pm.environment.set(\"boardDescription\", `Newly updated description ${boardTimestamp}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.err).to.eql(\"Boards validation failed: name: Board name is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"description\": \"{{boardDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User cannot edit a board that doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"const boardTimestamp = date.getTime();",
									"",
									"pm.environment.set(\"boardName\", `Newly updated name ${boardTimestamp}`);",
									"pm.environment.set(\"boardDescription\", `Newly updated description ${boardTimestamp}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.msg).to.eql(\"Cannot find task with id: 613aaa896dc61766b83037df\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"name\",\n    \"description\": \"description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards/613aaa896dc61766b83037df",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"613aaa896dc61766b83037df"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleans after test",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PATCH - /api/v1/boards/:id Copy",
			"item": [
				{
					"name": "Creates a board to update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Saves boardID to update\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.environment.set(\"boardID\", responseData.board._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Name of the board\",\n    \"description\": \"Description of the board\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can successfully edit a board attribute",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"const boardTimestamp = date.getTime();",
									"",
									"pm.environment.set(\"boardName\", `Newly updated name ${boardTimestamp}`);",
									"pm.environment.set(\"boardDescription\", `Newly updated description ${boardTimestamp}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.board.name).to.eql(pm.environment.get(\"boardName\"));",
									"    pm.expect(responseData.board.description).to.eql(\"Description of the board\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{boardName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if board is successfully edited",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.eql(pm.environment.get(\"boardName\"));",
									"    pm.expect(responseData.description).to.eql(\"Description of the board\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User cannot edit a board's name with empty value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"const boardTimestamp = date.getTime();",
									"",
									"pm.environment.set(\"boardName\", `Newly updated name ${boardTimestamp}`);",
									"pm.environment.set(\"boardDescription\", `Newly updated description ${boardTimestamp}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.err).to.eql(\"Validation failed: name: Board name is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"description\": \"{{boardDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User cannot edit a board that doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"const boardTimestamp = date.getTime();",
									"",
									"pm.environment.set(\"boardName\", `Newly updated name ${boardTimestamp}`);",
									"pm.environment.set(\"boardDescription\", `Newly updated description ${boardTimestamp}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"New board values are returned\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.msg).to.eql(\"Cannot find task with id: 613aaa896dc61766b83037df\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"name\",\n    \"description\": \"description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards/613aaa896dc61766b83037df",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"613aaa896dc61766b83037df"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleans after test",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE - /api/v1/boards/:id",
			"item": [
				{
					"name": "Creates a board for deletion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"boardName\", `Newly created board name to be deleted`);",
									"pm.environment.set(\"boardDescription\", `Newly created board description to be delted`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Board is created and ID is saved\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.environment.set(\"boardID\", responseData.board._id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{boardName}}\",\n    \"description\": \"{{boardDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/boards",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can successfully delete a board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message is returned\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.msg).to.eql(\"Board deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/{{boardID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User cannot delete board that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Success message is returned\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.msg).to.eql(\"Cannot find task with id: 613a5ba2ed6442624d494444\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/613a5ba2ed6442624d494444",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"613a5ba2ed6442624d494444"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET - /api/v1/boards/:id/tasks",
			"item": [
				{
					"name": "User can successfully fetch specific board tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Endpoints returns array of objects with proper values', function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.a('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/613ca63e96e5a8b7aee602c7/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"613ca63e96e5a8b7aee602c7",
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET - /api/v1/boards/:id/tasks/id",
			"item": [
				{
					"name": "User can successfully fetch specific board task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Endpoints returns array of objects with proper values', function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData._id).to.be.a('string');",
									"    pm.expect(responseData.summary).to.be.a('string');",
									"    pm.expect(responseData.description).to.be.a('string');",
									"    pm.expect(responseData.status).to.be.a('string');",
									"    pm.expect(responseData.priority).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/boards/613ca63e96e5a8b7aee602c7/tasks/613ca61096e5a8b7aee602c6",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"boards",
								"613ca63e96e5a8b7aee602c7",
								"tasks",
								"613ca61096e5a8b7aee602c6"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time always is less than 300ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(500);",
					"});"
				]
			}
		}
	]
}